{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | number | string\n\nexport enum ChainId {\n  ETHEREUM = 1,\n  MAINNET = 56,\n  TESTNET = 97,\n  POLYGON = 137,\n  ROBURNA = 156,\n  ROBURNA_TESTNET = 157\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _999 = JSBI.BigInt(999)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI ? bigintIsh : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.TESTNET]: new Token(\n    ChainId.TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ETHEREUM]: new Token(\n    ChainId.ETHEREUM,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether',\n    'https://weth.io/'\n  ),\n  [ChainId.POLYGON]: new Token(\n    ChainId.POLYGON,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic',\n    'https://polygon.technology/'\n  ),\n  [ChainId.ROBURNA]: new Token(\n    ChainId.ROBURNA,\n    '0x86D1D92E543220Bd2F91Ec01694100043a25675A',\n    18,\n    'WRBA',\n    'Wrapped Roburna',\n    'https://roburna.com/'\n  ),\n  [ChainId.ROBURNA_TESTNET]: new Token(\n    ChainId.ROBURNA_TESTNET,\n    '0x38aed14869Df0B10abCE55b6de03Ae168b5c1eeF',\n    18,\n    'WRBA',\n    'Wrapped Roburna',\n    'https://roburna.com/'\n  )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _999,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [factory: string]: { [token0Address: string]: { [token1Address: string]: string } } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  public readonly factory: string\n  public readonly initCodeHash: string\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(factoryAddress: string, initCodeHash: string, tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (!PAIR_ADDRESS_CACHE?.[factoryAddress]) PAIR_ADDRESS_CACHE[factoryAddress] = {};\n    if (PAIR_ADDRESS_CACHE?.[factoryAddress]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE[factoryAddress] = {\n        ...PAIR_ADDRESS_CACHE[factoryAddress],\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE[factoryAddress]?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            factoryAddress,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            initCodeHash\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[factoryAddress][tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, factoryAddress: string, initCodeHash: string) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(factoryAddress, initCodeHash, tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'Goose-lp', // used for permit\n      'Goosebumps LPs' // used for permit\n    )\n    this.factory = factoryAddress\n    this.initCodeHash = initCodeHash\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _999)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.factory, this.initCodeHash)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _999)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.factory, this.initCodeHash)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '..'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   * @param factoryAddress the address of the factory contract\n   * @param initCodeHash the pair initCodeHash\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   * @param factoryAddress the address of the factory contract\n   * @param initCodeHash the pair initCodeHash\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as InsufficientInputAmountError).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as InsufficientReservesError).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Goosebumps Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Goosebumps Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Goosebumps Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const factories: string[] = trade.route.pairs.map(pair => validateAndParseAddress(pair.factory))\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [factories, amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [factories, amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [factories, amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [factories, amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [factories, amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [factories, amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IGooseBumpsSwapPair from './abis/IGooseBumpsSwapPair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n  },\n  [ChainId.ETHEREUM]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   * @param factoryAddress the address of the factory contract\n   * @param initCodeHash the pair initCodeHash\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n    factoryAddress: string,\n    initCodeHash: string\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(factoryAddress, initCodeHash, tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IGooseBumpsSwapPair, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), factoryAddress, initCodeHash)\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_999","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","projectLink","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","TESTNET","ETHEREUM","POLYGON","ROBURNA","ROBURNA_TESTNET","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","factoryAddress","initCodeHash","tokenAmounts","liquidityToken","factory","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE$f3","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","factories","map","to","recipient","allowedSlippage","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IGooseBumpsSwapPair","getReserves","reserves0","reserves1","balances"],"mappings":"gJAKYA,EASAC,EAKAC,+VAdAF,EAAAA,kBAAAA,8CAEVA,0BACAA,0BACAA,2BACAA,2BACAA,4CAGUC,EAAAA,oBAAAA,sDAEVA,oCAGUC,EAAAA,mBAAAA,mDAEVA,qCACAA,+BAgBUC,EAbCC,EAAoBC,EAAKC,OAAO,KAGhCC,EAAOF,EAAKC,OAAO,GACnBE,EAAMH,EAAKC,OAAO,GAClBG,EAAMJ,EAAKC,OAAO,GAClBI,EAAQL,EAAKC,OAAO,GACpBK,EAAON,EAAKC,OAAO,GACnBM,EAAMP,EAAKC,OAAO,IAClBO,EAAOR,EAAKC,OAAO,KACnBQ,EAAOT,EAAKC,OAAO,KACnBS,EAAQV,EAAKC,OAAO,MAEjC,SAAYH,GACVA,gBACAA,oBAFF,CAAYA,IAAAA,OAKL,IAAMa,UACVb,EAAac,OAAQZ,EAAKC,OAAO,UACjCH,EAAae,SAAUb,EAAKC,OAAO,woFC5CtC,IAAMa,EAAoB,mBAAoBC,OAMjCC,2FACyC,IAI7CC,KAAOC,EAAKC,YAAYF,KACzBH,GAAmBC,OAAOK,gEAAgCC,gCANnBC,QAclCC,8FAC4C,IAIhDN,KAAOO,EAAKL,YAAYF,KACzBH,GAAmBC,OAAOK,gEAAgCC,gCANhBC,iBCdlCG,EAA6BC,EAAaC,GAC9C3B,EAAK4B,mBAAmBF,EAAOxB,IAAzC2B,MACU7B,EAAK8B,gBAAgBJ,EAAOf,EAAqBgB,KAA3DE,eAIcE,EAAwBC,cAETC,aAAWD,GAGtC,MAAOE,GACPL,gBAIYM,EAAeC,UACtBA,aAAqBpC,EAAOoC,EAAYpC,EAAKC,OAAOmC,YAI7CC,EAAKC,GACnBb,EAA6Ba,EAAGxC,EAAae,aAEzC0B,EADAC,EAAUtC,KAEVF,EAAKyC,YAAYH,EAAGjC,OACtBmC,EAAIF,EACJC,EAAIvC,EAAK0C,IAAI1C,EAAK2C,OAAOL,EAAGlC,GAAMD,GAC3BH,EAAK4C,SAASL,EAAGC,IACtBA,EAAID,EACJA,EAAIvC,EAAK2C,OAAO3C,EAAK0C,IAAI1C,EAAK2C,OAAOL,EAAGC,GAAIA,GAAInC,QAEzCJ,EAAK6C,SAASP,EAAGpC,KAC1BsC,EAAIrC,UAECqC,EAKT,SAAgBM,EAAgBC,EAAYL,EAAQM,EAAiBC,MACzDD,EAAU,GAApBnB,MAEUkB,EAAMG,QAAUF,GAA1BnB,MAGqB,IAAjBkB,EAAMG,cACRH,EAAMI,KAAKT,GACJ,SAEDU,EAASL,EAAMG,SAAWF,KAE5BI,GAAUH,EAAWF,EAAMA,EAAMG,OAAS,GAAIR,IAAQ,SACjDA,UAGLW,EAAK,EACPC,EAAKP,EAAMG,OAENG,EAAKC,GAAI,KACRC,EAAOF,EAAKC,IAAQ,EACtBL,EAAWF,EAAMQ,GAAMb,IAAQ,EACjCW,EAAKE,EAAM,EAEXD,EAAKC,SAGTR,EAAMS,OAAOH,EAAI,EAAGX,GACbU,EAASL,EAAMU,MAAS,WCjEtBC,EAgBX,SAAsBC,EAAkBC,EAAiB3C,GACvDQ,EAA6BzB,EAAKC,OAAO0D,GAAW7D,EAAac,YAE5D+C,SAAWA,OACXC,OAASA,OACT3C,KAAOA,GAIV4C,EAjBmBH,QAAkB,IAAIA,EAAS,GAAI,MAAO,OCVtDI,yBAMTC,EACA/B,EACA2B,EACAC,EACA3C,EACA+C,8BAEML,EAAUC,EAAQ3C,UACnB8C,QAAUA,IACV/B,QAAUD,EAAwBC,KAClCgC,YAAcA,sCAOdC,OAAA,SAAOC,UAERC,OAASD,GAGNC,KAAKJ,UAAYG,EAAMH,SAAWI,KAAKnC,UAAYkC,EAAMlC,WAS3DoC,YAAA,SAAYF,UACPC,KAAKJ,UAAYG,EAAMH,SAAjClC,MACUsC,KAAKnC,UAAYkC,EAAMlC,SAAjCH,MACOsC,KAAKnC,QAAQqC,cAAgBH,EAAMlC,QAAQqC,kBAxC3BX,YA+CXY,EAAeC,EAAqBC,UAC9CD,aAAqBT,GAASU,aAAqBV,EAC9CS,EAAUN,OAAOO,KACfD,aAAqBT,GAErBU,aAAqBV,GAGvBS,IAAcC,WAIZC,WACV9E,gBAAQ+E,SAAU,IAAIZ,EACrBnE,gBAAQ+E,QACR,6CACA,GACA,OACA,cACA,6BAED/E,gBAAQgF,SAAU,IAAIb,EACrBnE,gBAAQgF,QACR,6CACA,GACA,OACA,cACA,6BAEDhF,gBAAQiF,UAAW,IAAId,EACtBnE,gBAAQiF,SACR,6CACA,GACA,OACA,gBACA,sBAEDjF,gBAAQkF,SAAU,IAAIf,EACrBnE,gBAAQkF,QACR,6CACA,GACA,SACA,gBACA,iCAEDlF,gBAAQmF,SAAU,IAAIhB,EACrBnE,gBAAQmF,QACR,6CACA,GACA,OACA,kBACA,0BAEDnF,gBAAQoF,iBAAkB,IAAIjB,EAC7BnE,gBAAQoF,gBACR,6CACA,GACA,OACA,kBACA,2BCxGEC,GAAUC,EAASC,GACnBC,GAAMF,EAASG,GAEfC,WACHxF,iBAASyF,YAAaN,GAAQM,aAC9BzF,iBAAS0F,eAAgBP,GAAQO,gBACjC1F,iBAAS2F,UAAWR,GAAQQ,YAGzBC,WACH5F,iBAASyF,gBACTzF,iBAAS0F,mBACT1F,iBAAS2F,eAGCE,yBAIQC,EAAsBC,YAAAA,IAAAA,EAAyBzF,QAC3DwF,UAAYxD,EAAewD,QAC3BC,YAAczD,EAAeyD,8BAa7BC,OAAA,kBACE,IAAIH,EAASvB,KAAKyB,YAAazB,KAAKwB,cAGtCjD,IAAA,SAAIwB,OACH4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAASvD,EAAe+B,WAChFlE,EAAK+F,MAAM5B,KAAKyB,YAAaE,EAAYF,aACpC,IAAIF,EAAS1F,EAAK0C,IAAIyB,KAAKwB,UAAWG,EAAYH,WAAYxB,KAAKyB,aAErE,IAAIF,EACT1F,EAAK0C,IACH1C,EAAKgG,SAAS7B,KAAKwB,UAAWG,EAAYF,aAC1C5F,EAAKgG,SAASF,EAAYH,UAAWxB,KAAKyB,cAE5C5F,EAAKgG,SAAS7B,KAAKyB,YAAaE,EAAYF,iBAIzCK,SAAA,SAAS/B,OACR4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAASvD,EAAe+B,WAChFlE,EAAK+F,MAAM5B,KAAKyB,YAAaE,EAAYF,aACpC,IAAIF,EAAS1F,EAAKiG,SAAS9B,KAAKwB,UAAWG,EAAYH,WAAYxB,KAAKyB,aAE1E,IAAIF,EACT1F,EAAKiG,SACHjG,EAAKgG,SAAS7B,KAAKwB,UAAWG,EAAYF,aAC1C5F,EAAKgG,SAASF,EAAYH,UAAWxB,KAAKyB,cAE5C5F,EAAKgG,SAAS7B,KAAKyB,YAAaE,EAAYF,iBAIzChD,SAAA,SAASsB,OACR4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAASvD,EAAe+B,WAC7ElE,EAAK4C,SACV5C,EAAKgG,SAAS7B,KAAKwB,UAAWG,EAAYF,aAC1C5F,EAAKgG,SAASF,EAAYH,UAAWxB,KAAKyB,iBAIvCM,QAAA,SAAQhC,OACP4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAASvD,EAAe+B,WAC7ElE,EAAK+F,MACV/F,EAAKgG,SAAS7B,KAAKwB,UAAWG,EAAYF,aAC1C5F,EAAKgG,SAASF,EAAYH,UAAWxB,KAAKyB,iBAIvCnD,YAAA,SAAYyB,OACX4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAASvD,EAAe+B,WAC7ElE,EAAKyC,YACVzC,EAAKgG,SAAS7B,KAAKwB,UAAWG,EAAYF,aAC1C5F,EAAKgG,SAASF,EAAYH,UAAWxB,KAAKyB,iBAIvCI,SAAA,SAAS9B,OACR4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAASvD,EAAe+B,WAC7E,IAAIwB,EACT1F,EAAKgG,SAAS7B,KAAKwB,UAAWG,EAAYH,WAC1C3F,EAAKgG,SAAS7B,KAAKyB,YAAaE,EAAYF,iBAIzCjD,OAAA,SAAOuB,OACN4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAASvD,EAAe+B,WAC7E,IAAIwB,EACT1F,EAAKgG,SAAS7B,KAAKwB,UAAWG,EAAYF,aAC1C5F,EAAKgG,SAAS7B,KAAKyB,YAAaE,EAAYH,eAIzCQ,cAAA,SACLC,EACAC,EACAC,YADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBzG,iBAAS0F,eAEpBiB,OAAOC,UAAUL,IAA3BvE,MACUuE,EAAoB,GAA9BvE,MAEAmD,GAAQ0B,IAAI,CAAEC,UAAWP,EAAoB,EAAGE,SAAUjB,GAAsBiB,SAC1EM,EAAW,IAAI5B,GAAQb,KAAKwB,UAAUkB,YACzCC,IAAI3C,KAAKyB,YAAYiB,YACrBE,oBAAoBX,UAChBQ,EAAS3B,SAAS2B,EAASI,gBAAiBX,MAG9CY,QAAA,SACLD,EACAX,EACAC,mBADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBzG,iBAAS0F,eAEpBiB,OAAOC,UAAUO,IAA3BnF,MACUmF,GAAiB,GAA3BnF,MAEAsD,GAAI+B,GAAKF,EACT7B,GAAIgC,GAAK1B,GAAgBa,GAClB,IAAInB,GAAIhB,KAAKwB,UAAUkB,YAAYC,IAAI3C,KAAKyB,YAAYiB,YAAY5B,SAAS+B,EAAeX,+CAzG5FrG,EAAK2C,OAAOwB,KAAKwB,UAAWxB,KAAKyB,sDAKjC,IAAIF,EAAS1F,EAAKoH,UAAUjD,KAAKwB,UAAWxB,KAAKyB,aAAczB,KAAKyB,uDA2GpE,IAAIF,EAASvB,KAAKwB,UAAWxB,KAAKyB,sBCzIvCT,GAAMF,EAASG,GAERiC,0BAYWC,EAAoBC,SAClCC,EAAerF,EAAeoF,UACpC9F,EAA6B+F,EAAc1H,EAAae,wBAElD2G,EAAcxH,EAAKyH,aAAalH,EAAKP,EAAKC,OAAOqH,EAAS3D,mBAC3D2D,SAAWA,aAVJI,MAAP,SAAaH,UACX,IAAIF,EAAexD,EAAO0D,+BAgB5B7E,IAAA,SAAIwB,UACCI,EAAeH,KAAKmD,SAAUpD,EAAMoD,WAA9CzF,MACO,IAAIwF,EAAelD,KAAKmD,SAAUtH,EAAK0C,IAAIyB,KAAKwD,IAAKzD,EAAMyD,SAG7D1B,SAAA,SAAS/B,UACJI,EAAeH,KAAKmD,SAAUpD,EAAMoD,WAA9CzF,MACO,IAAIwF,EAAelD,KAAKmD,SAAUtH,EAAKiG,SAAS9B,KAAKwD,IAAKzD,EAAMyD,SAGlExB,cAAA,SACLC,EACAC,EACAC,mBAFAF,IAAAA,EAA4B,YAE5BE,IAAAA,EAAqBzG,iBAASyF,wBAEjBa,wBAAcC,EAAmBC,EAAQC,MAGjDW,QAAA,SACLD,EACAX,EACAC,mBAFAU,IAAAA,EAAwB7C,KAAKmD,SAAS3D,mBAEtC2C,IAAAA,EAAqBzG,iBAASyF,YAEpB0B,GAAiB7C,KAAKmD,SAAS3D,UAAzC9B,kBACaoF,kBAAQD,EAAeX,EAAQC,MAGvCsB,QAAA,SAAQvB,mBAAAA,IAAAA,EAAiB,CAAEE,eAAgB,KAChDpB,GAAI+B,GAAK/C,KAAKmD,SAAS3D,SAChB,IAAIwB,GAAIhB,KAAKwB,UAAUkB,YAAYC,IAAI3C,KAAKyB,YAAYiB,YAAY5B,SAASoB,0CAhC7ElC,KAAKwB,iBArBoBD,ICNvBmC,0BAIQC,EAAcP,8BACzBO,EAAOP,UACRO,MAAQA,sCAGRpF,IAAA,SAAIwB,UACCC,KAAK2D,MAAM7D,OAAOC,EAAM4D,QAAlCjG,MACO,IAAIgG,EAAY1D,KAAK2D,MAAO9H,EAAK0C,IAAIyB,KAAKwD,IAAKzD,EAAMyD,SAGvD1B,SAAA,SAAS/B,UACJC,KAAK2D,MAAM7D,OAAOC,EAAM4D,QAAlCjG,MACO,IAAIgG,EAAY1D,KAAK2D,MAAO9H,EAAKiG,SAAS9B,KAAKwD,IAAKzD,EAAMyD,UAhBpCN,ICKpBU,0BAkBQC,EAAwBC,EAAyBrC,EAAwBD,8BACpFA,EAAWC,UAEZoC,aAAeA,IACfC,cAAgBA,IAChBC,OAAS,IAAIxC,GAChB1F,EAAKyH,aAAalH,EAAKP,EAAKC,OAAO+H,EAAarE,WAChD3D,EAAKyH,aAAalH,EAAKP,EAAKC,OAAOgI,EAActE,uBApBvCwE,UAAP,SAAiBC,aAChBC,EAAkB,OACAD,EAAME,MAAMC,0BAAW,eAAhCC,OACbH,EAAOlF,KACLiF,EAAMK,WAAQxE,OAAOuE,EAAKE,QACtB,IAAIX,EAAMS,EAAKG,SAASrB,SAAUkB,EAAKI,SAAStB,SAAUkB,EAAKG,SAAShB,IAAKa,EAAKI,SAASjB,KAC3F,IAAII,EAAMS,EAAKI,SAAStB,SAAUkB,EAAKG,SAASrB,SAAUkB,EAAKI,SAASjB,IAAKa,EAAKG,SAAShB,aAG5FU,EAAOQ,MAAM,GAAGC,QAAO,SAACC,EAAaC,UAAiBD,EAAY/C,SAASgD,KAAeX,EAAO,gCAuBnGxC,OAAA,kBACE,IAAIkC,EAAM5D,KAAK8D,cAAe9D,KAAK6D,aAAc7D,KAAKwB,UAAWxB,KAAKyB,gBAGxEI,SAAA,SAAS9B,GACJI,EAAeH,KAAK8D,cAAe/D,EAAM8D,eAAnDnG,UACMoH,cAAiBjD,mBAAS9B,UACzB,IAAI6D,EAAM5D,KAAK6D,aAAc9D,EAAM+D,cAAegB,EAASrD,YAAaqD,EAAStD,cAInFuD,MAAA,SAAMC,UACD7E,EAAe6E,EAAe7B,SAAUnD,KAAK6D,eAAvDnG,MACIsC,KAAK8D,yBAAyBnE,EACzB,IAAI+D,GAAY1D,KAAK8D,cAAemB,YAAMpD,mBAASmD,EAAexB,KAAKf,UAEzES,GAAeK,MAAM0B,YAAMpD,mBAASmD,EAAexB,KAAKf,aAG1DT,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxCjC,KAAKkF,SAASlD,cAAcC,EAAmBC,EAAQC,MAGzDW,QAAA,SAAQD,EAA2BX,EAAiBC,mBAA5CU,IAAAA,EAAwB,GAC9B7C,KAAKkF,SAASpC,QAAQD,EAAeX,EAAQC,0CA/B7C,IAAIZ,GAASvB,KAAKwB,UAAWxB,KAAKyB,iEAI5BI,mBAAS7B,KAAK+D,eAlCJxC,ICSvB4D,GAA8G,GAErGC,yBA2BQC,EAA2BC,EAA2BC,EAAwBC,OACzFC,EAAeJ,EAAa1B,MAAM1D,YAAYqF,EAAa3B,OAC7D,CAAC0B,EAAcC,GACf,CAACA,EAAcD,QACdK,eAAiB,IAAI/F,EACxB8F,EAAa,GAAG9B,MAAM/D,QACtBwF,EAAKtH,WAAWyH,EAAgBC,EAAcC,EAAa,GAAG9B,MAAO8B,EAAa,GAAG9B,OACrF,GACA,kCAGGgC,QAAUJ,OACVC,aAAeA,OACfC,aAAeA,IAlCR3H,WAAP,SAAkByH,EAAwBC,EAAsBI,EAAeC,iBAC9EC,EAASF,EAAO3F,YAAY4F,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,UAEnET,MAAAA,UAAAA,GAAqBI,MAAiBJ,GAAmBI,GAAkB,SACOQ,KAAnFZ,MAAAA,cAAAA,GAAqBI,6BAAkBO,EAAO,GAAGjI,+BAAWiI,EAAO,GAAGjI,YACxEsH,GAAmBI,QACdJ,GAAmBI,WACrBO,EAAO,GAAGjI,wBACNsH,GAAmBI,uBAAnBS,EAAqCF,EAAO,GAAGjI,iBACjDiI,EAAO,GAAGjI,SAAUoI,oBACnBV,EACAW,YAAU,CAAC,SAAU,CAACC,OAAK,CAAC,UAAW,WAAY,CAACL,EAAO,GAAGjI,QAASiI,EAAO,GAAGjI,YACjF2H,YAMDL,GAAmBI,GAAgBO,EAAO,GAAGjI,SAASiI,EAAO,GAAGjI,qCAuBlEuI,cAAA,SAAczC,UACZA,EAAM7D,OAAOE,KAAKuE,SAAWZ,EAAM7D,OAAOE,KAAKqG,WAqBjDC,QAAA,SAAQ3C,UACH3D,KAAKoG,cAAczC,IAA7BjG,MACOiG,EAAM7D,OAAOE,KAAKuE,QAAUvE,KAAKuG,YAAcvG,KAAKwG,eA0BtDC,UAAA,SAAU9C,UACL3D,KAAKoG,cAAczC,IAA7BjG,MACOiG,EAAM7D,OAAOE,KAAKuE,QAAUvE,KAAKwE,SAAWxE,KAAKyE,YAGnDiC,gBAAA,SAAgBC,MACX3G,KAAKoG,cAAcO,EAAYhD,QAAzCjG,MACI7B,EAAK+F,MAAM5B,KAAKwE,SAAShB,IAAKzH,IAASF,EAAK+F,MAAM5B,KAAKyE,SAASjB,IAAKzH,SACjE,IAAIc,MAEN+J,EAAe5G,KAAKyG,UAAUE,EAAYhD,OAC1CkD,EAAgB7G,KAAKyG,UAAUE,EAAYhD,MAAM7D,OAAOE,KAAKuE,QAAUvE,KAAKqG,OAASrG,KAAKuE,QAC1FuC,EAAqBjL,EAAKgG,SAAS8E,EAAYnD,IAAKlH,GACpDkF,EAAY3F,EAAKgG,SAASiF,EAAoBD,EAAcrD,KAC5D/B,EAAc5F,EAAK0C,IAAI1C,EAAKgG,SAAS+E,EAAapD,IAAKjH,GAAQuK,GAC/DC,EAAe,IAAIrD,GACvBiD,EAAYhD,MAAM7D,OAAOE,KAAKuE,QAAUvE,KAAKqG,OAASrG,KAAKuE,OAC3D1I,EAAK2C,OAAOgD,EAAWC,OAErB5F,EAAK+F,MAAMmF,EAAavD,IAAKzH,SACzB,IAAIqB,QAEL,CAAC2J,EAAc,IAAI3B,EAAKwB,EAAarI,IAAIoI,GAAcE,EAAc/E,SAASiF,GAAe/G,KAAK2F,QAAS3F,KAAKwF,kBAGlHwB,eAAA,SAAeD,MACV/G,KAAKoG,cAAcW,EAAapD,QAA1CjG,MAEE7B,EAAK+F,MAAM5B,KAAKwE,SAAShB,IAAKzH,IAC9BF,EAAK+F,MAAM5B,KAAKyE,SAASjB,IAAKzH,IAC9BF,EAAK4B,mBAAmBsJ,EAAavD,IAAKxD,KAAKyG,UAAUM,EAAapD,OAAOH,WAEvE,IAAI3G,MAGNgK,EAAgB7G,KAAKyG,UAAUM,EAAapD,OAC5CiD,EAAe5G,KAAKyG,UAAUM,EAAapD,MAAM7D,OAAOE,KAAKuE,QAAUvE,KAAKqG,OAASrG,KAAKuE,QAC1F/C,EAAY3F,EAAKgG,SAAShG,EAAKgG,SAAS+E,EAAapD,IAAKuD,EAAavD,KAAMjH,GAC7EkF,EAAc5F,EAAKgG,SAAShG,EAAKiG,SAAS+E,EAAcrD,IAAKuD,EAAavD,KAAMlH,GAChFqK,EAAc,IAAIjD,GACtBqD,EAAapD,MAAM7D,OAAOE,KAAKuE,QAAUvE,KAAKqG,OAASrG,KAAKuE,OAC5D1I,EAAK0C,IAAI1C,EAAK2C,OAAOgD,EAAWC,GAAczF,UAEzC,CAAC2K,EAAa,IAAIvB,EAAKwB,EAAarI,IAAIoI,GAAcE,EAAc/E,SAASiF,GAAe/G,KAAK2F,QAAS3F,KAAKwF,kBAGjHyB,mBAAA,SACLC,EACA7B,EACAC,GAEU4B,EAAYvD,MAAM7D,OAAOE,KAAK0F,iBAAxChI,UAMIyJ,EALE1B,EAAeJ,EAAa1B,MAAM1D,YAAYqF,EAAa3B,OAC7D,CAAC0B,EAAcC,GACf,CAACA,EAAcD,MACTI,EAAa,GAAG9B,MAAM7D,OAAOE,KAAKuE,SAAWkB,EAAa,GAAG9B,MAAM7D,OAAOE,KAAKqG,SAAzF3I,MAGI7B,EAAK+F,MAAMsF,EAAY1D,IAAKzH,GAC9BoL,EAAYtL,EAAKiG,SAAS5D,EAAKrC,EAAKgG,SAAS4D,EAAa,GAAGjC,IAAKiC,EAAa,GAAGjC,MAAO5H,OACpF,KACCwL,EAAUvL,EAAK2C,OAAO3C,EAAKgG,SAAS4D,EAAa,GAAGjC,IAAK0D,EAAY1D,KAAMxD,KAAKwE,SAAShB,KACzF6D,EAAUxL,EAAK2C,OAAO3C,EAAKgG,SAAS4D,EAAa,GAAGjC,IAAK0D,EAAY1D,KAAMxD,KAAKyE,SAASjB,KAC/F2D,EAAYtL,EAAK8B,gBAAgByJ,EAASC,GAAWD,EAAUC,MAE5DxL,EAAKyC,YAAY6I,EAAWpL,SACzB,IAAIqB,SAEL,IAAIsG,GAAY1D,KAAK0F,eAAgByB,MAGvCG,kBAAA,SACL3D,EACAuD,EACAC,EACAI,EACAC,OAOIC,cARJF,IAAAA,GAAiB,GAGPvH,KAAKoG,cAAczC,IAA7BjG,MACUwJ,EAAYvD,MAAM7D,OAAOE,KAAK0F,iBAAxChI,MACUyJ,EAAUxD,MAAM7D,OAAOE,KAAK0F,iBAAtChI,MACU7B,EAAK8B,gBAAgBwJ,EAAU3D,IAAK0D,EAAY1D,MAA1D9F,MAGK6J,EAEE,CACOC,GAAZ9J,UACMgK,EAAc1J,EAAewJ,MAC9B3L,EAAK+F,MAAM8F,EAAa3L,GAY3B0L,EAAsBP,MAZY,KAC5BS,EAAQzJ,EAAKrC,EAAKgG,SAAS7B,KAAKwE,SAAShB,IAAKxD,KAAKyE,SAASjB,MAC5DoE,EAAY1J,EAAKwJ,MACnB7L,EAAKyC,YAAYqJ,EAAOC,GAAY,KAChCpG,EAAY3F,EAAKgG,SAASqF,EAAY1D,IAAK3H,EAAKiG,SAAS6F,EAAOC,IAChEnG,EAAc5F,EAAK0C,IAAI1C,EAAKgG,SAAS8F,EAAOxL,GAAOyL,GACnDC,EAAehM,EAAK2C,OAAOgD,EAAWC,GAC5CgG,EAAsBP,EAAY3I,IAAI,IAAImF,GAAY1D,KAAK0F,eAAgBmC,SAE3EJ,EAAsBP,QAb1BO,EAAsBP,SAoBjB,IAAIxD,GACTC,EACA9H,EAAK2C,OAAO3C,EAAKgG,SAASsF,EAAU3D,IAAKxD,KAAKyG,UAAU9C,GAAOH,KAAMiE,EAAoBjE,qDArJpF,IAAII,GAAM5D,KAAKuE,OAAQvE,KAAKqG,OAAQrG,KAAKyF,aAAa,GAAGjC,IAAKxD,KAAKyF,aAAa,GAAGjC,gDAOnF,IAAII,GAAM5D,KAAKqG,OAAQrG,KAAKuE,OAAQvE,KAAKyF,aAAa,GAAGjC,IAAKxD,KAAKyF,aAAa,GAAGjC,4CAgBnFxD,KAAKuE,OAAO3E,8CAIZI,KAAKyF,aAAa,GAAG9B,4CAIrB3D,KAAKyF,aAAa,GAAG9B,8CAIrB3D,KAAKyF,aAAa,2CAIlBzF,KAAKyF,aAAa,YC7GhBqC,yBAOQ3D,EAAe4D,EAAiBC,GACvC7D,EAAMpF,OAAS,GAAzBrB,MAEEyG,EAAM8D,OAAM,SAAA5D,UAAQA,EAAKzE,UAAYuE,EAAM,GAAGvE,YADhDlC,MAKGqK,aAAiBpI,GAASwE,EAAM,GAAGiC,cAAc2B,IAC/CA,IAAUrI,GAASyE,EAAM,GAAGiC,cAAc9F,GAAK6D,EAAM,GAAGvE,WAF7DlC,WAMoB,IAAXsK,GACJA,aAAkBrI,GAASwE,EAAMA,EAAMpF,OAAS,GAAGqH,cAAc4B,IACjEA,IAAWtI,GAASyE,EAAMA,EAAMpF,OAAS,GAAGqH,cAAc9F,GAAK6D,EAAM,GAAGvE,WAH7ElC,gBAOM4G,EAAgB,CAACyD,aAAiBpI,EAAQoI,EAAQzH,GAAK6D,EAAM,GAAGvE,cAC9CuE,EAAMC,0BAAW,eAA1BC,OACP6D,EAAe5D,QACX4D,EAAapI,OAAOuE,EAAKE,SAAW2D,EAAapI,OAAOuE,EAAKgC,SAAvE3I,UACMsK,EAASE,EAAapI,OAAOuE,EAAKE,QAAUF,EAAKgC,OAAShC,EAAKE,OACrED,EAAKtF,KAAKgJ,QAGP7D,MAAQA,OACRG,KAAOA,OACP6D,SAAWvE,GAAMI,UAAUhE,WAC3B+H,MAAQA,OACRC,OAASA,MAAAA,EAAAA,EAAU1D,EAAKA,EAAKvF,OAAS,oDAIpCiB,KAAKmE,MAAM,GAAGvE,iBC9CnBwI,GAAe,IAAI7G,GAASlF,GAErBgM,mGACJrG,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxCjC,KAAK6B,SAASuG,IAAcpG,cAAcC,EAAmBC,EAAQC,MAGvEW,QAAA,SAAQD,EAA2BX,EAAiBC,mBAA5CU,IAAAA,EAAwB,GAC9B7C,KAAK6B,SAASuG,IAActF,QAAQD,EAAeX,EAAQC,OANzCZ,aC+Bb+G,GAAsBC,EAAgBC,UAE1CrI,EAAeoI,EAAE5B,YAAYxD,SAAUqF,EAAE7B,YAAYxD,WAA/DzF,MACUyC,EAAeoI,EAAExB,aAAa5D,SAAUqF,EAAEzB,aAAa5D,WAAjEzF,MACI6K,EAAExB,aAAahF,QAAQyG,EAAEzB,cACvBwB,EAAE5B,YAAY5E,QAAQyG,EAAE7B,aACnB,EAGL4B,EAAE5B,YAAYlI,SAAS+J,EAAE7B,cACnB,EAED,EAIL4B,EAAExB,aAAatI,SAAS+J,EAAEzB,cACrB,GAEC,WAME0B,GAAgBF,EAAUC,OAClCE,EAASJ,GAAsBC,EAAGC,UACzB,IAAXE,EACKA,EAILH,EAAEI,YAAYlK,SAAS+J,EAAEG,cACnB,EACCJ,EAAEI,YAAYrK,YAAYkK,EAAEG,aAC9B,EAIFJ,EAAEtE,MAAMK,KAAKvF,OAASyJ,EAAEvE,MAAMK,KAAKvF,OAe5C,SAAS6J,GAAc5D,EAAgCpF,UACjDoF,aAA0BtB,GAAoBsB,EAC9CA,EAAe7B,WAAazD,EAAc,IAAIgE,GAAYpD,GAAKV,GAAUoF,EAAexB,UAC5F9F,MAGF,SAASmL,GAAgB1F,EAAoBvD,UACvCuD,aAAoBxD,EAAcwD,EAClCA,IAAazD,EAAcY,GAAKV,QACpClC,MAOF,IAAaoL,yBAoDQ7E,EAAcb,EAAwB2F,OAzIehC,EAClEiC,EAEAC,EAuIEC,EAAyB,IAAIC,MAAMlF,EAAMK,KAAKvF,QAC9CqK,EAAoB,IAAID,MAAMlF,EAAME,MAAMpF,WAC5CgK,IAActN,kBAAU4N,YAAa,CAC7BlJ,EAAeiD,EAAOD,SAAUc,EAAM8D,QAAhDrK,MACAwL,EAAQ,GAAKN,GAAcxF,EAAQa,EAAMrE,aACpC,IAAI0J,EAAI,EAAGA,EAAIrF,EAAMK,KAAKvF,OAAS,EAAGuK,IAAK,OACjCrF,EAAME,MAAMmF,GACa5C,gBAAgBwC,EAAQI,IAAzCC,OACrBL,EAAQI,EAAI,QACZF,EAAUE,GAAKC,OAEZ,CACKpJ,EAAeiD,EAAOD,SAAUc,EAAM+D,SAAhDtK,MACAwL,EAAQA,EAAQnK,OAAS,GAAK6J,GAAcxF,EAAQa,EAAMrE,aACrD,IAAI0J,EAAIrF,EAAMK,KAAKvF,OAAS,EAAGuK,EAAI,EAAGA,IAAK,OACjCrF,EAAME,MAAMmF,EAAI,GACQtC,eAAekC,EAAQI,IAAxCC,OACpBL,EAAQI,EAAI,QACZF,EAAUE,EAAI,GAAKC,QAIlBtF,MAAQA,OACR8E,UAAYA,OACZpC,YACHoC,IAActN,kBAAU4N,YACpBjG,EACAa,EAAM8D,QAAUrI,EAChBwD,GAAeK,MAAM2F,EAAQ,GAAG1F,KAChC0F,EAAQ,QACTnC,aACHgC,IAActN,kBAAU+N,aACpBpG,EACAa,EAAM+D,SAAWtI,EACjBwD,GAAeK,MAAM2F,EAAQA,EAAQnK,OAAS,GAAGyE,KACjD0F,EAAQA,EAAQnK,OAAS,QAC1B0K,eAAiB,IAAI7F,GACxB5D,KAAK2G,YAAYxD,SACjBnD,KAAK+G,aAAa5D,SAClBnD,KAAK2G,YAAYnD,IACjBxD,KAAK+G,aAAavD,UAEfkG,aAAe9F,GAAMI,UAAU,IAAI8D,GAAMsB,EAAWnF,EAAM8D,aAC1DY,aArLiE5B,EAqLE/G,KAAK+G,aAlLzEkC,GAFAD,EAoLkC/E,EAAMkE,SApLlB3E,IAAI3B,SAoLwB7B,KAAK2G,YApLRnD,MAEzB1B,SAASiF,EAAavD,KAAKhF,OAAOwK,GACvD,IAAIX,GAAQY,EAASzH,UAAWyH,EAASxH,gBAsHlCkI,QAAP,SAAe1F,EAAc2F,UAC3B,IAAId,EAAM7E,EAAO2F,EAAUnO,kBAAU4N,gBAUhCQ,SAAP,SAAgB5F,EAAc6F,UAC5B,IAAIhB,EAAM7E,EAAO6F,EAAWrO,kBAAU+N,0CAsDxCO,iBAAA,SAAiBC,MACXA,EAAkBvL,SAAS1C,IAAtC2B,MACIsC,KAAK+I,YAActN,kBAAU+N,oBACxBxJ,KAAK+G,iBAENkD,EAA4B,IAAI1I,GAASvF,GAC5CuC,IAAIyL,GACJtI,SACAG,SAAS7B,KAAK+G,aAAavD,KAAKf,gBAC5BzC,KAAK+G,wBAAwBrD,GAChC,IAAIA,GAAY1D,KAAK+G,aAAapD,MAAOsG,GACzC/G,GAAeK,MAAM0G,MAQtBC,gBAAA,SAAgBF,MACVA,EAAkBvL,SAAS1C,IAAtC2B,MACIsC,KAAK+I,YAActN,kBAAU4N,mBACxBrJ,KAAK2G,gBAENwD,EAA2B,IAAI5I,GAASvF,GAAKuC,IAAIyL,GAAmBnI,SAAS7B,KAAK2G,YAAYnD,KAAKf,gBAClGzC,KAAK2G,uBAAuBjD,GAC/B,IAAIA,GAAY1D,KAAK2G,YAAYhD,MAAOwG,GACxCjH,GAAeK,MAAM4G,MAkBfC,iBAAP,SACLjG,EACAkG,EACAC,IAGAC,EACAC,EACAC,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBC,IAAAA,EAAmCH,YACnCI,IAAAA,EAAsB,IAEZtG,EAAMpF,OAAS,GAAzBrB,MACUiN,EAAU,GAApBjN,MACU8M,IAAqBH,GAAoBE,EAAaxL,OAAS,GAAzErB,UACMkC,EACJyK,aAA4B3G,GACxB2G,EAAiB1G,MAAM/D,QACvB0K,aAAuB3K,EACvB2K,EAAY1K,aACZmG,OACgBA,IAAZnG,GAAVlC,cAEMkM,EAAWhB,GAAcyB,EAAkBzK,GAC3CgL,EAAW/B,GAAgByB,EAAa1K,GACrC0J,EAAI,EAAGA,EAAInF,EAAMpF,OAAQuK,IAAK,KAC/BjF,EAAOF,EAAMmF,OAEdjF,EAAKE,OAAOzE,OAAO8J,EAASjG,QAAWU,EAAKgC,OAAOvG,OAAO8J,EAASjG,UACpEU,EAAKG,SAASzC,QAAQhG,KAASsI,EAAKI,SAAS1C,QAAQhG,QAErD+N,aAEAA,EAAazF,EAAKqC,gBAAgBkD,MACpC,MAAO7L,MAEFA,EAAuC8M,8CAGtC9M,KAGJ+L,EAAUnG,MAAM7D,OAAO8K,GACzBjM,EACE8L,EACA,IAAI3B,EACF,IAAIhB,aAAUyC,GAAclG,IAAOmG,EAAiBrH,SAAUmH,GAC9DE,EACA/O,kBAAU4N,aAEZqB,EACAjC,SAEG,GAAIkC,EAAU,GAAKxG,EAAMpF,OAAS,EAAG,KACpC+L,EAAyB3G,EAAMO,MAAM,EAAG4E,GAAGyB,OAAO5G,EAAMO,MAAM4E,EAAI,EAAGnF,EAAMpF,SAGjF+J,EAAMsB,iBACJU,EACAhB,EACAQ,EACA,CACEI,cAAAA,EACAC,QAASA,EAAU,aAEjBJ,GAAclG,IAClBmG,EACAC,YAKCA,KAkBKO,kBAAP,SACL7G,EACA8G,EACAC,IAGAX,EACAY,EACAV,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBY,IAAAA,EAAoCD,YACpCT,IAAAA,EAAsB,IAEZtG,EAAMpF,OAAS,GAAzBrB,MACUiN,EAAU,GAApBjN,MACUyN,IAAsBD,GAAqBX,EAAaxL,OAAS,GAA3ErB,UACMkC,EACJsL,aAA6BxH,GACzBwH,EAAkBvH,MAAM/D,QACxBqL,aAAsBtL,EACtBsL,EAAWrL,aACXmG,OACgBA,IAAZnG,GAAVlC,cAEMoM,EAAYlB,GAAcsC,EAAmBtL,GAC7CwL,EAAUvC,GAAgBoC,EAAYrL,GACnC0J,EAAI,EAAGA,EAAInF,EAAMpF,OAAQuK,IAAK,KAC/BjF,EAAOF,EAAMmF,OAEdjF,EAAKE,OAAOzE,OAAOgK,EAAUnG,QAAWU,EAAKgC,OAAOvG,OAAOgK,EAAUnG,UACtEU,EAAKG,SAASzC,QAAQhG,KAASsI,EAAKI,SAAS1C,QAAQhG,QAErD6N,aAEAA,EAAYvF,EAAK2C,eAAe8C,MAClC,MAAO/L,MAEFA,EAAoCsN,2CAGnCtN,KAGJ6L,EAASjG,MAAM7D,OAAOsL,GACxBzM,EACE8L,EACA,IAAI3B,EACF,IAAIhB,IAAOzD,UAASkG,GAAeU,EAAYE,EAAkBhI,UACjEgI,EACA1P,kBAAU+N,cAEZkB,EACAjC,SAEG,GAAIkC,EAAU,GAAKxG,EAAMpF,OAAS,EAAG,KACpC+L,EAAyB3G,EAAMO,MAAM,EAAG4E,GAAGyB,OAAO5G,EAAMO,MAAM4E,EAAI,EAAGnF,EAAMpF,SAGjF+J,EAAMkC,kBACJF,EACAG,EACArB,EACA,CACEc,cAAAA,EACAC,QAASA,EAAU,IAEpBtG,UAASkG,GACVY,EACAV,YAKCA,QCpWX,SAASa,GAAMtG,cACDA,EAAexB,IAAId,SAAS,IAG1C,OAKsB6I,qCAUNC,mBAAP,SAA0BC,EAAcC,OACvCC,EAAUF,EAAM9E,YAAYxD,WAAazD,EACzCkM,EAAWH,EAAM1E,aAAa5D,WAAazD,EAErCiM,GAAWC,GAAvBlO,QACY,QAASgO,IAAYA,EAAQG,IAAM,GAA/CnO,UAcIoO,EACAC,EACAxO,EAdEyO,EAAsBP,EAAMxH,MAAME,MAAM8H,KAAI,SAAA5H,UAAQzG,EAAwByG,EAAKsB,YACjFuG,EAAatO,EAAwB8N,EAAQS,WAC7CvC,EAAmB0B,GAAMG,EAAMvB,gBAAgBwB,EAAQU,kBACvDtC,EAAoBwB,GAAMG,EAAM1B,iBAAiB2B,EAAQU,kBACzD9H,EAAiBmH,EAAMxH,MAAMK,KAAK2H,KAAI,SAACtI,UAAUA,EAAM9F,WACvDwO,EACJ,QAASX,QACCY,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAAQf,EAAQG,KAAKnJ,SAAS,SACjEgJ,EAAQW,SAAS3J,SAAS,IAE/BgK,EAAmBC,QAAQjB,EAAQkB,sBAKjCnB,EAAM1C,gBACPtN,kBAAU4N,YACTsC,GACFG,EAAaY,EAAmB,qDAAuD,wBAEvFX,EAAO,CAACC,EAAWlC,EAAWxF,EAAM4H,EAAIG,GACxC9O,EAAQqM,GACCgC,GACTE,EAAaY,EAAmB,qDAAuD,wBAEvFX,EAAO,CAACC,EAAWpC,EAAUE,EAAWxF,EAAM4H,EAAIG,GAClD9O,EAhDO,QAkDPuO,EAAaY,EACT,wDACA,2BAEJX,EAAO,CAACC,EAAWpC,EAAUE,EAAWxF,EAAM4H,EAAIG,GAClD9O,EAvDO,kBA0DN9B,kBAAU+N,aACFkD,GAAXhP,MACIiO,GACFG,EAAa,wBAEbC,EAAO,CAACC,EAAWlC,EAAWxF,EAAM4H,EAAIG,GACxC9O,EAAQqM,GACCgC,GACTE,EAAa,wBAEbC,EAAO,CAACC,EAAWlC,EAAWF,EAAUtF,EAAM4H,EAAIG,GAClD9O,EArEO,QAuEPuO,EAAa,2BAEbC,EAAO,CAACC,EAAWlC,EAAWF,EAAUtF,EAAM4H,EAAIG,GAClD9O,EA1EO,aA8EN,CACLuO,WAAAA,EACAC,KAAAA,EACAxO,MAAAA,6lNClIFsP,YACDrR,gBAAQ+E,SAAU,MAElB/E,gBAAQiF,UAAW,8CAC4B,OAO5BqM,qCAcAC,wBAClBnN,EACA/B,EACAmP,EACAvN,EACA3C,0BAEMmQ,UAaC,IAAItN,EAAMC,EAAS/B,EAASoP,EAAgBxN,EAAQ3C,aAjB3DkQ,IAAAA,EAAWE,qBAAmBC,aAAWvN,WAKe,2BAA/CiN,2BAAAO,EAAuBxN,uBAAvByN,EAAkCxP,+BACrCgP,GAAqBjN,GAAS/B,oBACxB,IAAIyP,WAASzP,EAAS0P,GAAOP,GAAUxN,WAAWgO,MAAK,SAAChO,oBAC5DqN,QACKA,WACFjN,kBACIiN,uBAAAY,EAAuB7N,WACzB/B,GAAU2B,UAGRA,qDAaGkO,uBAClB9H,EACAC,EACAmH,EACAzH,EACAC,gBAFAwH,IAAAA,EAAWE,qBAAmBC,aAAWvH,EAAOhG,WAItCgG,EAAOhG,UAAYiG,EAAOjG,SAApClC,UACMG,EAAUuH,GAAKtH,WAAWyH,EAAgBC,EAAcI,EAAQC,0BACjC,IAAIyH,WAASzP,EAAS8P,GAAqBX,GAAUY,qCAAnFC,OAAWC,OACZC,EAAWnI,EAAO3F,YAAY4F,GAAU,CAACgI,EAAWC,GAAa,CAACA,EAAWD,UAC5E,IAAIzI,GAAK,IAAI1B,GAAYkC,EAAQmI,EAAS,IAAK,IAAIrK,GAAYmC,EAAQkI,EAAS,IAAKxI,EAAgBC"}